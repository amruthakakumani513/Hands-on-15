[4:54 PM, 4/30/2024] Himanth Us: def floyd_warshall_algorithm(graph):
    # Initialize distance matrix with initial values
    distance = {u: {v: float('inf') if u != v else 0 for v in graph} for u in graph}
    
    # Fill distance matrix with initial values from the graph
    for u in graph:
        for v in graph[u]:
            distance[u][v] = graph[u][v]

    # Compute shortest paths using Floyd-Warshall algorithm
    for k in graph:
        for i in graph:
            for j in graph:
                distance[i][j] = min(distance[i][j], distance[i][k] + distance[k][j])

    return distance

# Example graph (Figure 25.1 from Page 690)
graph = {
    '1': {'2': 3, '3': 8, '5': -4},
    '2': {'5': 7, '4': 1},
    '3': {'2': 4},
    '4': {'3': -5, '1': 2},
    '5': {'4': 6}
}

# Calculate all pairs shortest paths
all_pairs_shortest_paths = floyd_warshall_algorithm(graph)

# Print shortest paths from each node to every other node
for u in graph:
    for v in graph:
        print(f"Shortest path from {u} to {v}: {all_pairs_shortest_paths[u][v]}")
    print()
